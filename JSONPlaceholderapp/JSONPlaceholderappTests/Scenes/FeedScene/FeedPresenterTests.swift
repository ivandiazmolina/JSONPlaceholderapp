//
//  FeedPresenterTests.swift
//  JSONPlaceholderapp
//
//  Created by Iván Díaz Molina on 07/06/2020.
//  Copyright (c) 2020 Iván Díaz Molina. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import JSONPlaceholderapp
import XCTest

class FeedPresenterTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: FeedPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupFeedPresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupFeedPresenter() {
        sut = FeedPresenter()
    }
    
    // MARK: Test doubles
    
    class FeedDisplayLogicSpy: FeedDisplayLogic {
        
        var setupViewCalled = false
        var displayLoadingCalled = false
        var displayPostsCalled = false
        var displayCommentsCalled = false
        
        func setupView(viewModel: Feed.Models.ViewModel) {
            setupViewCalled = true
        }
        
        func displayLoading(_ show: Bool) {
            displayLoadingCalled = true
        }
        
        func displayPosts(viewModel: Feed.Models.ViewModel) {
            displayPostsCalled = true
        }
        
        func displayComments() {
            displayCommentsCalled = true
        }
    }
    
    // MARK: Tests
    
    func testSetupView() {
        // Given
        let spy = FeedDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.setupView(response: Feed.Models.Response())
        
        // Then
        XCTAssertTrue(spy.setupViewCalled, "setupView should ask the view controller to display the result")
    }
    
    func testDisplayLoading() {
       // Given
        let spy = FeedDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.displayLoading(true)
        
        // Then
        XCTAssertTrue(spy.displayLoadingCalled, "displayLoading should ask the view controller to display the result")
    }
    
    func testPresentComments() {
        // Given
        let spy = FeedDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.presentComments()
        
        // Then
        XCTAssertTrue(spy.displayCommentsCalled, "presentComments should ask the view controller to display the result")
    }
}
