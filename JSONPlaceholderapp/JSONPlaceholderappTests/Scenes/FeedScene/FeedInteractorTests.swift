//
//  FeedInteractorTests.swift
//  JSONPlaceholderapp
//
//  Created by Iván Díaz Molina on 07/06/2020.
//  Copyright (c) 2020 Iván Díaz Molina. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import JSONPlaceholderapp
import XCTest

class FeedInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: FeedInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupFeedInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupFeedInteractor() {
        sut = FeedInteractor()
    }
    
    // MARK: Test doubles
    
    class FeedPresentationLogicSpy: FeedPresentationLogic {
        
        var setupViewCalled = false
        var displayLoadingCalled = false
        var presentCommentsCalled = false
        
        func setupView(response: Feed.Models.Response) {
            setupViewCalled = true
        }
        
        func displayLoading(_ show: Bool) {
            displayLoadingCalled = true
        }
        
        func presentComments() {
            presentCommentsCalled = true
        }
    }
    
    // MARK: Tests
    
    func testSetupView() {
        // Given
        let spy = FeedPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.setupView()
        
        // Then
        XCTAssertTrue(spy.setupViewCalled, "setupView must call setup from presenter")
    }
    
    func testGetPostsCount() {
        // Given
        let spy = FeedPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        
        sut.posts = [Post()]
        
        let count = sut.getPostsCount()
        
        // Then
        XCTAssertEqual(sut.posts?.count, count, "method should count the posts number of elements")
    }
    
    func testGetPostCellFor() {
        //TODO
    }
    
    func testLoadComments() {
        // Given
        let spy = FeedPresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.loadComments(for: Post())
        
        // Then
        XCTAssertTrue(spy.displayLoadingCalled, "loadComments must call displayLoadingCalled from presenter")
    }
}
