//
//  ExploreInteractorTests.swift
//  JSONPlaceholderapp
//
//  Created by Iván Díaz Molina on 08/06/2020.
//  Copyright (c) 2020 Iván Díaz Molina. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import JSONPlaceholderapp
import XCTest

class ExploreInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: ExploreInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupExploreInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupExploreInteractor() {
        sut = ExploreInteractor()
    }
    
    // MARK: Test doubles
    
    class ExplorePresentationLogicSpy: ExplorePresentationLogic {
        
        var setupViewCalled = false
        var displayLoadingCalled = false
        var presentAlbumsAndTodosCalled = false
        
        func setupView(response: Explore.Models.Response) {
            setupViewCalled = true
        }
        
        func displayLoading(_ show: Bool) {
            displayLoadingCalled = true
        }
        
        func presentAlbumsAndTodos() {
            presentAlbumsAndTodosCalled = true
        }
    }
    
    // MARK: Tests
    
    func testSetupView() {
        // Given
        let spy = ExplorePresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.setupView()
        
        // Then
        XCTAssertTrue(spy.setupViewCalled, "setupView() should ask the presenter to format the result")
    }
    
    func testDidSelectedItemAt() {
        // Given
        let spy = ExplorePresentationLogicSpy()
        sut.presenter = spy
        sut.setUsers([User()])
                
        // When
        sut.didSelectedItemAt(index: 0)
        
        // Then
//        XCTAssertTrue(spy.presentAlbumsAndTodosCalled, "didSelectedItemAt() should ask the presenter to format the result")
    }
    
    func testSetUsers() {
        // Given
        let spy = ExplorePresentationLogicSpy()
        sut.presenter = spy
        let users: [User] = []
        
        // When
        sut.setUsers(users)
        
        // Then
        XCTAssertEqual(users.count, sut.getUsersCount(), "method should count the users number of elements")
    }
    
    func testGetUsersCount() {
        // Given
        let spy = ExplorePresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.users = [User()]
        let count = sut.getUsersCount()
        
        // Then
        XCTAssertEqual(sut.users?.count, count, "method should count the users number of elements")
    }
    
    func testGetUserCellFor() {
        //TODO
    }
}
