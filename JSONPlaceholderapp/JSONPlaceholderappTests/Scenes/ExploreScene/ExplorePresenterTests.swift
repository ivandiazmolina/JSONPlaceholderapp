//
//  ExplorePresenterTests.swift
//  JSONPlaceholderapp
//
//  Created by Iván Díaz Molina on 08/06/2020.
//  Copyright (c) 2020 Iván Díaz Molina. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import JSONPlaceholderapp
import XCTest

class ExplorePresenterTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: ExplorePresenter!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupExplorePresenter()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupExplorePresenter() {
        sut = ExplorePresenter()
    }
    
    // MARK: Test doubles
    
    class ExploreDisplayLogicSpy: ExploreDisplayLogic {
        
        var setupViewCalled = false
        var displayLoadingCalled = false
        var displayUsersCalled = false
        var displayAlbumsAndTodosCalled = false
        
        func setupView(viewModel: Explore.Models.ViewModel) {
            setupViewCalled = true
        }
        
        func displayLoading(_ show: Bool) {
            displayLoadingCalled = true
        }
        
        func displayUsers(viewModel: Explore.Models.ViewModel) {
            displayUsersCalled = true
        }
        
        func displayAlbumsAndTodos() {
            displayAlbumsAndTodosCalled = true
        }
    }
    
    // MARK: Tests
    
    func testSetupView() {
        // Given
        let spy = ExploreDisplayLogicSpy()
        sut.viewController = spy
        let response = Explore.Models.Response()
        
        // When
        sut.setupView(response: response)
        
        // Then
        XCTAssertTrue(spy.setupViewCalled, "setupView(response:) should ask the view controller to display the result")
    }
    
    func testDisplayLoading() {
        // Given
        let spy = ExploreDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.displayLoading(true)
        
        // Then
        XCTAssertTrue(spy.displayLoadingCalled, "displayLoading() should ask the view controller to display the result")
    }
    
    func testPresentAlbumsAndTodos() {
        // Given
        let spy = ExploreDisplayLogicSpy()
        sut.viewController = spy
        
        // When
        sut.presentAlbumsAndTodos()
        
        // Then
        XCTAssertTrue(spy.displayAlbumsAndTodosCalled, "presentAlbumsAndTodos() should ask the view controller to display the result")
    }
}
