//
//  ProfileInteractorTests.swift
//  JSONPlaceholderapp
//
//  Created by Iván Díaz Molina on 07/06/2020.
//  Copyright (c) 2020 Iván Díaz Molina. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import JSONPlaceholderapp
import XCTest

class ProfileInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: ProfileInteractor!
    
    var albumsRequest: Profile.Models.Request?
    var todosRequest: Profile.Models.Request?
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        
        albumsRequest = Profile.Models.Request(event: .onTouchAlbums)
        todosRequest = Profile.Models.Request(event: .onTouchTodos)
        
        setupProfileInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupProfileInteractor() {
        sut = ProfileInteractor()
    }
    
    // MARK: Test doubles
    
    class ProfilePresentationLogicSpy: ProfilePresentationLogic {
        
        var setupViewCalled = false
        var displayLoadingCalled = false
        var presentAlbumsCalled = false
        var presentTodosCalled = false
        var presentPhotosCalled = false
        
        func setupView(response: Profile.Models.Response) {
            setupViewCalled = true
        }
        
        func displayLoading(_ show: Bool) {
            displayLoadingCalled = true
        }
        
        func presentAlbums() {
            presentAlbumsCalled = true
        }
        
        func presentTodos() {
            presentTodosCalled = true
        }
        
        func presentPhotos() {
            presentPhotosCalled = true
        }
    }
    
    // MARK: Tests
    
    func testSetupView() {
        // Given
        let spy = ProfilePresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.setupView()
        
        // Then
        XCTAssertTrue(spy.setupViewCalled, "setupView must call setup from presenter")
    }
    
    func testLoadAlbumsData() {
        // Given
        let spy = ProfilePresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.loadData(request: albumsRequest ?? Profile.Models.Request())
        
        // Then
        XCTAssertTrue(spy.presentAlbumsCalled, "testLoadAlbumsData must call presentAlbumsCalled from presenter")
    }
    
    func testLoadTodosData() {
        // Given
        let spy = ProfilePresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.loadData(request: todosRequest ?? Profile.Models.Request())
        
        // Then
        XCTAssertTrue(spy.presentTodosCalled, "testLoadTodosData must call presentTodosCalled from presenter")
    }
    
    func testGetAlbumsCount() {
        // Given
        let spy = ProfilePresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.albums = [Album()]
        let count = sut.getAlbumsCount()
        
        // Then
        XCTAssertEqual(sut.albums?.count, count, "method should count the albums number of elements")
    }
    
    func testGetAlbumCellFor() {
        //TODO
    }
    
    func testDidSelectedAlbumAt() {
        // Given
        let spy = ProfilePresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.loadData(request: todosRequest ?? Profile.Models.Request())
        
        // Then
        XCTAssertTrue(spy.presentTodosCalled, "testLoadData must call presentTodosCalled from presenter")
    }
    
    func testGetTodosCount() {
        // Given
        let spy = ProfilePresentationLogicSpy()
        sut.presenter = spy
        
        // When
        sut.todos = [Todo()]
        let count = sut.getTodosCount()
        
        // Then
        XCTAssertEqual(sut.todos?.count, count, "method should count the todos number of elements")
    }
    
    func testGetTodoCellFor() {
        //TODO
    }
}
