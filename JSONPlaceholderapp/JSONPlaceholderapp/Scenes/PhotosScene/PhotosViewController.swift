//
//  PhotosViewController.swift
//  JSONPlaceholderapp
//
//  Created by Iván Díaz Molina on 07/06/2020.
//  Copyright (c) 2020 Iván Díaz Molina. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PhotosDisplayLogic: class {
    func setupView()
}

class PhotosViewController: BaseViewController, PhotosDisplayLogic {
    
    var interactor: PhotosBusinessLogic?
    var router: (NSObjectProtocol & PhotosRoutingLogic & PhotosDataPassing)?
    
    // MARK: IBOutlets
    @IBOutlet weak var photosCollectionView: UICollectionView!
    
    // LETS AND VARS
    let CELL_SIZE: CGFloat = 120
    let CELL_PADDING: CGFloat = 10
    let SECTION_INSET: CGFloat = 5
    let COLUMNS: CGFloat = 3
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = PhotosInteractor()
        let presenter = PhotosPresenter()
        let router = PhotosRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad(){
        super.viewDidLoad()
        interactor?.setupView()
    }
    
    func setupView() {
        
        //CollectionView
        photosCollectionView.register(PhotoCollectionViewCell.cellIdentifier)
        photosCollectionView.delegate = self
        photosCollectionView.dataSource = self
        
        let flowLayout = UICollectionViewFlowLayout()
        flowLayout.itemSize = CGSize(width: UIScreen.main.bounds.width/COLUMNS - CELL_PADDING, height: CELL_SIZE)
        flowLayout.sectionInset = UIEdgeInsets(top: 0, left: SECTION_INSET, bottom: 0, right: SECTION_INSET)
        flowLayout.minimumInteritemSpacing = 0.0
        photosCollectionView.collectionViewLayout = flowLayout
    }
}

// MARK: UICollectionViewDelegate, UICollectionViewDatasource
extension PhotosViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return interactor?.getPhotosCount() ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: PhotoCollectionViewCell.cellIdentifier, for: indexPath) as? PhotoCollectionViewCell else {
            print("Error to cast UICollectionViewCell to PhotoCollectionViewCell")
            return UICollectionViewCell()
        }
        
        guard let data = interactor?.getPhotoCellFor(index: indexPath.row) else {
            print("Error to get PhotoCollectionViewCell from index")
            return UICollectionViewCell()
        }

        cell.updateUI(model: data)
        
        return cell
    }
}
