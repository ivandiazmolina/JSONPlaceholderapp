//
//  ProfileViewController.swift
//  JSONPlaceholderapp
//
//  Created by Iván Díaz Molina on 06/06/2020.
//  Copyright (c) 2020 Iván Díaz Molina. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProfileDisplayLogic: class {
    func setupView(viewModel: Profile.Models.ViewModel)
}

class ProfileViewController: BaseViewController, ProfileDisplayLogic {
    
    var interactor: ProfileBusinessLogic?
    var router: (NSObjectProtocol & ProfileRoutingLogic & ProfileDataPassing)?
    
    // MARK: IBOutlets
    @IBOutlet weak var avatarImageView: UIImageView!
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var usernameLabel: UILabel!
    @IBOutlet weak var albumsTableView: UITableView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ProfileInteractor()
        let presenter = ProfilePresenter()
        let router = ProfileRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    
    @IBAction func onTapAlbums(_ sender: UIButton) {
        print("onTapAlbums")
    }
    
    @IBAction func onTapTodos(_ sender: UIButton) {
        print("onTapTodos")
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.setupView()
    }
    
    func setupView(viewModel: Profile.Models.ViewModel) {
        
        // TableView
        albumsTableView.register(AlbumTableViewCell.cellIdentifier)
        albumsTableView.delegate = self
        albumsTableView.dataSource = self
        
        ui { [weak self] in
            self?.nameLabel.text = viewModel.name
            self?.usernameLabel.text = viewModel.username
        }
    }
}

// MARK: UITableviewDelegate and UITableViewDataSource

extension ProfileViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return interactor?.getAlbumsCount() ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: AlbumTableViewCell.cellIdentifier) as? AlbumTableViewCell else {
            print("Error to cast TableViewCell to AlbumTableViewCell")
            return UITableViewCell()
        }
        
        guard let data = interactor?.getAlbumCellFor(index: indexPath.row) else {
            print("Error to get AlbumTableViewCell from index")
            return UITableViewCell()
        }
        
        cell.updateUI(model: data)
        
        return cell
    }
}
