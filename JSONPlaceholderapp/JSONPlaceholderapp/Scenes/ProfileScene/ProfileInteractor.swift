//
//  ProfileInteractor.swift
//  JSONPlaceholderapp
//
//  Created by Iván Díaz Molina on 06/06/2020.
//  Copyright (c) 2020 Iván Díaz Molina. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProfileBusinessLogic {
    func setupView()
    func loadData(request: Profile.Models.Request)
    
    // MARK: Album
    func getAlbumsCount() -> Int
    func getAlbumCellFor(index: Int) -> Profile.Models.AlbumCellModel
    func didSelectedAlbumAt(index: Int)
    
    // MARK: Todo
    func getTodosCount() -> Int
    func getTodoCellFor(index: Int) -> Profile.Models.TodoCellModel
    
}

protocol ProfileDataStore {
    var user: User? { get set }
    var albums: [Album]? { get set }
    var selectedAlbum: Album? { get set }
    var todos: [Todo]? { get set }
    var photos: [Photo]? { get set }
}

class ProfileInteractor: ProfileBusinessLogic, ProfileDataStore {

    var presenter: ProfilePresentationLogic?
    var worker: ProfileWorker?
    
    var user: User?
    var albums: [Album]?
    var selectedAlbum: Album?
    var todos: [Todo]?
    var photos: [Photo]?
    
    func setupView() {
        worker = ProfileWorker()
        let response = Profile.Models.Response(user: user)
        presenter?.setupView(response: response)
    }
    
    // MARK: Common
    
    func loadData(request: Profile.Models.Request) {
                
        switch request.event {
        case .onTouchAlbums:
            presenter?.presentAlbums()
        case .onTouchTodos:
            presenter?.presentTodos()
        default: break
        }
    }
    
    func didSelectedAlbumAt(index: Int) {
        
        guard let album = albums?.getElement(index) else { return }
        
        selectedAlbum = album
        
        presenter?.displayLoading(true)

        let deadlineTime = DispatchTime.now() + 1
        DispatchQueue.main.asyncAfter(deadline: deadlineTime) { [weak self] in
            self?.worker?.getPhotos(for: album, completion: { [weak self] (photos, error) in

                self?.photos = photos

                self?.presenter?.displayLoading(false)
                self?.presenter?.presentPhotos()
            })
        }
    }
    
    // MARK: Albums
    
    func getAlbumsCount() -> Int {
        return albums?.count ?? 0
    }
    
    func getAlbumCellFor(index: Int) -> Profile.Models.AlbumCellModel {
        guard let album = albums?.getElement(index) else { return Profile.Models.AlbumCellModel() }
        return Profile.Models.AlbumCellModel(album: album)
    }
    
    // MARK: Todos
    
    func getTodosCount() -> Int {
        return todos?.count ?? 0
    }
    
    func getTodoCellFor(index: Int) -> Profile.Models.TodoCellModel {
        guard let todo = todos?.getElement(index) else { return Profile.Models.TodoCellModel() }
        return Profile.Models.TodoCellModel(todo: todo)
    }
}
