//
//  MainViewController.swift
//  JSONPlaceholderapp
//
//  Created by Iván Díaz Molina on 04/06/2020.
//  Copyright (c) 2020 Iván Díaz Molina. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainDisplayLogic: class {
    func setupView(viewModel: Main.Models.ViewModel)
    func displayPostsAndUsers(viewModel: Main.Models.ViewModel)
}

protocol MainDelegate: class {
    func fetchedPosts(posts: [Post])
    func fetchedUsers(users: [User])
}

extension MainDelegate {
    func fetchedPosts(posts: [Post]) {}
    func fetchedUsers(users: [User]) {}
}

class MainViewController: UITabBarController, MainDisplayLogic {
    
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    weak var mainDelegate: MainDelegate?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        
        let viewController = self
        let interactor = MainInteractor()
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        interactor?.setupView()
        interactor?.getInitialData()
    }
    
    func setupView(viewModel: Main.Models.ViewModel) {
        print("")
    }
    
    func displayPostsAndUsers(viewModel: Main.Models.ViewModel) {
        
        print(viewModel)
        
        let feedVC = viewControllers?.getElement(0) as? FeedViewController
        let exploreVC = viewControllers?.getElement(1) as? ExploreViewController
        
        feedVC?.interactor?.setPosts(viewModel.posts ?? [])
        exploreVC?.interactor?.setUsers(viewModel.users ?? [])
        
        
        guard let delegate = mainDelegate else {
            print("mainDelegate is not initialized")
            return
        }
        
        delegate.fetchedPosts(posts: viewModel.posts ?? [])
        delegate.fetchedUsers(users: viewModel.users ?? [])
    }
}
