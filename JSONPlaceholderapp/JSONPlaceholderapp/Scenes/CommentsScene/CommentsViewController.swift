//
//  CommentsViewController.swift
//  JSONPlaceholderapp
//
//  Created by Iván Díaz Molina on 07/06/2020.
//  Copyright (c) 2020 Iván Díaz Molina. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CommentsDisplayLogic: class {
    func setupView()
}

class CommentsViewController: UIViewController, CommentsDisplayLogic {
    
    var interactor: CommentsBusinessLogic?
    var router: (NSObjectProtocol & CommentsRoutingLogic & CommentsDataPassing)?
    
    // MARK: IBOutlets
    @IBOutlet weak var commentsTableView: UITableView!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = CommentsInteractor()
        let presenter = CommentsPresenter()
        let router = CommentsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.setupView()
    }
    
    func setupView() {
        
        // TableView
        commentsTableView.register(CommentTableViewCell.cellIdentifier)
        commentsTableView.delegate = self
        commentsTableView.dataSource = self
    }
}

// MARK: UITableviewDelegate and UITableViewDataSource

extension CommentsViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return interactor?.getCommentsCount() ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CommentTableViewCell.cellIdentifier) as? CommentTableViewCell else {
            print("Error to cast TableViewCell to CommentTableViewCell")
            return UITableViewCell()
        }
        
        guard let data = interactor?.getCommentCellFor(index: indexPath.row) else {
            print("Error to get CommentTableViewCell from index")
            return UITableViewCell()
        }
        
        cell.updateUI(model: data)
        
        return cell
    }
}
